// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/v1/balance": {
            "get": {
                "description": "Retrieve all asset balances of the account",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "balance"
                ],
                "summary": "Get account balances",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/domain.Balance"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/transport.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/v1/book/{symbol}": {
            "get": {
                "description": "Fetch the current order book for a trading symbol",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "market"
                ],
                "summary": "Get order book",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Trading symbol",
                        "name": "symbol",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/domain.OrderBook"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/transport.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/v1/orders": {
            "post": {
                "description": "Place a new order on the configured exchange",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "orders"
                ],
                "summary": "Create a new order",
                "parameters": [
                    {
                        "description": "Order payload",
                        "name": "order",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/domain.OrderRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/domain.OrderResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/transport.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/transport.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/v1/orders/{symbol}/{id}": {
            "delete": {
                "description": "Cancel a placed order by symbol and ID",
                "tags": [
                    "orders"
                ],
                "summary": "Cancel an existing order",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Trading symbol",
                        "name": "symbol",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Order ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/transport.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "domain.Balance": {
            "type": "object",
            "properties": {
                "asset": {
                    "type": "string"
                },
                "free": {
                    "type": "number"
                },
                "locked": {
                    "type": "number"
                }
            }
        },
        "domain.DepthLevel": {
            "type": "object",
            "properties": {
                "price": {
                    "type": "number"
                },
                "quantity": {
                    "type": "number"
                }
            }
        },
        "domain.OrderBook": {
            "type": "object",
            "properties": {
                "asks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/domain.DepthLevel"
                    }
                },
                "bids": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/domain.DepthLevel"
                    }
                },
                "symbol": {
                    "type": "string"
                }
            }
        },
        "domain.OrderRequest": {
            "type": "object",
            "properties": {
                "clientID": {
                    "type": "string"
                },
                "price": {
                    "type": "number"
                },
                "quantity": {
                    "type": "number"
                },
                "side": {
                    "$ref": "#/definitions/domain.OrderSide"
                },
                "symbol": {
                    "type": "string"
                },
                "timestamp": {
                    "type": "string"
                },
                "type": {
                    "$ref": "#/definitions/domain.OrderType"
                }
            }
        },
        "domain.OrderResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "price": {
                    "type": "number"
                },
                "quantity": {
                    "type": "number"
                },
                "side": {
                    "$ref": "#/definitions/domain.OrderSide"
                },
                "status": {
                    "type": "string"
                },
                "symbol": {
                    "type": "string"
                },
                "timestamp": {
                    "type": "string"
                },
                "type": {
                    "$ref": "#/definitions/domain.OrderType"
                }
            }
        },
        "domain.OrderSide": {
            "type": "string",
            "enum": [
                "BUY",
                "SELL"
            ],
            "x-enum-varnames": [
                "SideBuy",
                "SideSell"
            ]
        },
        "domain.OrderType": {
            "type": "string",
            "enum": [
                "MARKET",
                "LIMIT"
            ],
            "x-enum-varnames": [
                "TypeMarket",
                "TypeLimit"
            ]
        },
        "transport.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
